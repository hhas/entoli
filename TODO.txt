


// given a value and required result type -> EVALUATE -> result of type Coercion.SwiftType
//
//    Scope.evaluate() -> Coercion._coerce_() -> Value._expandAs...()_ // for simple values
//
//    Scope.evaluate() -> ThunkCoercion._coerce_() -> Thunk(); Thunk.evaluate() -> Coercion.intersect() -> Coercion._coerce_() -> Value._expandAs...()_ // for thunks
//



`to` operator (define procedure) syntax is thorny:

to munge {bar: text, baz: list of number} returning list of text: blah, blah, blah.

to munge {bar: text, baz: list of number} as list of text: blah, blah, blah.



// TO DO: given user input [e.g.] `x()`, the empty expression group `()` after `x` should be treated same as `{}` or `nothing` here, either by parser or runtime (not sure which), as it's likely to be a common typo amongst users used to Algol-y syntax (where parens indicate both grouping and params lists); might be best if code editor 'auto-corrected' this upon user input since an empty expression group `()` returns `nothing` when evaluated anyway, either converting it to `{}` or ny deleting it entirely and inserting appropriate punctuation to end the command instead



// TO DO: Coercion instances should be able to perform set operations (isSubset, union, etc), eliminating double application



// note: `NAME as name` coercion will treat NAME as name literal if it is a Name value; to make it eval NAME as arg-less command, wrap it in parens, e.g. `(NAME) as name` (fortunately, `as` is fully auto-delimiting so never requires parens for disambiguation); in NameCoercion.resolve, make sure to typecheck passed value and return directly if it's a Name (note that names are one of those areas where conceptual clarity gets rather murky, as how they evaluate is heavily context-dependent: in some places, e.g. record fields, they're treated as symbolic name literals; in others as arg-less commands to be performed; furthermore, names can be added to scopes as procedures that return themselves; unfortunately, the alternative is to use different syntax for names vs commands, e.g. prefixing `@` to names, but that'll look nastly and will still cause confusion amongst novices as to when to include prefix and when not)



// note: evaling a type command gives a Constraint object (i.e. something that describes the structural representation + any value constraints that a unit of data is required to adhere to, whether by good fortune of already meeting those requirements or by being converted to that structure and constraint-checked, throwing an error if either fails)

// TO DO: comparable() method; as in kiwi (Q. should this return another coercion handler, or mapper, or comparable value?), used by comparision, sort, etc. to get normalized values from standard and comparison-only typespecs (e.g. `number`, `case-insensitive text`) that can be directly compared (which will no doubt be a bundle of fun given Swift's type system)

// (basically need to think about class structure; should primitives subclass natives, or vice-versa, or use protocols to cut across? also, want to avoid kiwi problem where most primitive typespecs don't know how to emit their own native command representation, which is something every entoli coercion handler should know how to do, not least because those representations should often be sufficiently 'English-like' to appear directly in user documentation)

// here's where things get sticky, as while ReturnType is a Value when working with native values only, it can be many different types when coercing down to primitive [Swift] types for use in primitive procs; one option would be to use dict of form [(eType,esType):converter,...], though that only works where ReturnType is not a generic (Array,Set,Dictionary), plus we also don't want to have to coerce Value->Value->sType as the extra boxing+unboxing is a waste of time - only thing would be if coercion handlers used the inefficient form for interpretation but emitted dedicated conversion code directly for compilation, in which case there might be some benefit to being able to reason away parts of the process

// TO DO: coercion handler value and/or coercion command; i.e. how best to construct and encapsulate Coercion objects as values? unlike kiwi, they do not apply directly to input values, but are only applied via `as` operator, args to procs [e.g. sort, comparison], Proc.call(), etc; therefore they can appear as opaque values that implement primitive API; whether or not they should subclass Value or just be wrapped by one is to be decided


// am inclined to use primitive procs as coercion constructors; the resulting value can then be bound to a name ('user-defined coercion', avoiding need for explicit kiwi-style `define type` command)



// note: could use ObjectIdentifier(VALUE.self) to build hashable keys when coercing from/to Value types, allowing all such coercions to be registered in a lookup table (caveat global tables are no good; like JSCore, we want to maximise isolation between interpreter instances)

// TO DO: what about Arrays, etc? // TO DO: this buggers things up, making it a generic-only constraint
// TO DO: need FromType too?


// TO DO: there's something valuely smelly about using generics here; shouldn't all type specs provide two overloaded coerce methods, one that returns Swift type and one that returns entoli type?

// TO DO: how to implement comparableValue() method that returns comparable values for use as sort and comparison keys (e.g. TextCoercion would return lowercaseString as entoli does case-insensitive text comparisons by default; CaseSensitiveTextCoercion would return string as-is)


